# Cargamos bases de referencia
# Creamos las BASES MODIFICADAS...
# Esto quiere decir... Las bases medicas originales se encuentran en el
# objeto "BASES_ORIGINALES".
# Alli las bases presentaran en sus variables categoricas los niveles ordenados
# de manera alfabetica.
# Cambiamos el ordena alfabetico por el orden que nosotros queremos.
# Y hay tambien varios puntos de control, por ejemplo cuando hay en la base
# original una categoria no declarada como un nivel posible en el
# objeto "BASES_NIVELES_ORIGINALES".
BasesModificadas_004 <- function(){
# # # Script: 004_BasesModificadas.R
# # # Se colocan los niveles del factor de todas las variables categoricas
# # # en el orden correcto segun las especificaciones de los archivos
# # # de los niveles.
# Base de datos original con los niveles ordenados
cat("Generacion BASE_MOD_ORIGINAL\n")
BASE_MOD_ORIGINAL <-  control_niveles(input_base = BASES_ORIGINALES[[1]], input_base_niveles = BASES_NIVELES_ORIGINALES[[1]])
# Base de datos IPT con los niveles ordenados
cat("Generacion BASE_MOD_IPT\n")
BASE_MOD_IPT <-  control_niveles(input_base = BASES_ORIGINALES[[2]], input_base_niveles = BASES_NIVELES_ORIGINALES[[2]])
# Base de datos IC con los niveles ordenados
cat("Generacion BASE_MOD_IC\n")
BASE_MOD_IC <-  control_niveles(input_base = BASES_ORIGINALES[[3]], input_base_niveles = BASES_NIVELES_ORIGINALES[[3]])
BASES_MODIFICADAS <- list(BASE_MOD_ORIGINAL, BASE_MOD_IPT, BASE_MOD_IC)
return(BASES_MODIFICADAS)
}
# Capturamos y separamos cada base
BASES_MODIFICADAS <- BasesModificadas_004()
# Separamos cada base
BASE_MOD_ORIGINAL <- BASES_MODIFICADAS[[1]]
BASE_MOD_IPT <- BASES_MODIFICADAS[[2]]
BASE_MOD_IC <- BASES_MODIFICADAS[[3]]
# Borramos lo que ya no hace falta.
remove(BASES_MODIFICADAS)
input_base = BASES_ORIGINALES[[1]]
input_base_niveles = BASES_NIVELES_ORIGINALES[[1]]
input_base
# Damos inicio
cat("Inicio: control_niveles() ----------------------------\n")
########################################################
# 1) Verificamos que ambas bases tengan las mismas columnas
{
###
nombres1 <- colnames(input_base)
nombres2 <- colnames(input_base_niveles)
decision1 <- identical(nombres1, nombres2)
frase1 <- "OKKKK  - Control y Cambio Niveles 1) - Mismo nombre de columnas en ambos archivos\n"
frase2 <- "DANGER!!! - Control y Cambio Niveles 1) -  Los archivos tienen diferentes columnas\n"
if (decision1)  cat(frase1) else cat(frase2)
###
} # Fin 1)
##################################################################################
decision1
frase3 <- "OKKKK  - Control y Cambio Niveles 2) - Niveles OK! \n"
frase4 <- "DANGER!!! - Control y Cambio Niveles 2) -  Niveles Extra en 'input_base' \n"
# Creamos una nueva base, donde realizaremos los cambios
base_mod <- input_base
# Tenemos ya detectadas cuales son las variables a las que vamos a realizar cambios.
propuesta_cambios <- as.vector(as.matrix(input_base_niveles[1,]))
cantidad_cambios <- sum(as.vector(propuesta_cambios == "SI"))
propuesta_cambios
cantidad_cambios
propuesta_cambios
cambios_realizados <- rep(FALSE, length(propuesta_cambios))
length(propuesta_cambios)
propuesta_cambios
n
n <- 5
propuesta_cambios[n]
input_base_niveles
c(3:nrow(input_base_niveles))
estas_filas <- c(3:nrow(input_base_niveles))
niveles_pretabulados <- na.omit(input_base_niveles[estas_filas, n])
niveles_pretabulados
input_base_niveles[estas_filas, n]
# Tomamos la columna de la base de datos...
# y la usamos como factor... y guardamos los niveles.
mi_factor <- as.factor(as.character(base_mod[,n]))
niveles_base <- levels(mi_factor)
#        niveles_base <- sort(niveles_base)
cantidad_pretabulados <- length(niveles_pretabulados)
cantidad_niveles_base <- length(niveles_base)
cantidad_pretabulados
cantidad_niveles_base
dt_niveles_base
# Si la base de datos efectivamente presenta al menos 1 nivel
if (cantidad_niveles_base > 0) {
dt_niveles_base <- rep(FALSE, length(niveles_base))
for (k in 1:length(niveles_base)) {
if (sum(niveles_base[k] == niveles_pretabulados) == 1) dt_niveles_base[k] <- TRUE
} # Fin for k
# La decision2
# Esta todo OK si los niveles de la BASE de datos
# estan todos dentro de los niveles pretabulados
decision2 <- sum(dt_niveles_base) == length(dt_niveles_base)
}
decision2
dt_niveles_base
cantidad_niveles_base
# Si la base de datos no presenta niveles
if (cantidad_niveles_base == 0) decision2 <- TRUE else decision2 <- FALSE
decision2
sum(dt_niveles_base) == length(dt_niveles_base)
#list.files("../003_LibyFunciones")
# Carga de Librerias
source("../003_LibyFunciones/001_libraries.R")
# Carga de la funcion EVA
source("../003_LibyFunciones/002_loadEVA.R")
# Carga de las funciones definidas en la carpeta "functions"
EVA01("../003_LibyFunciones/functions")
# Cargamos funciones escritas en otros formatos
source("../003_LibyFunciones/003_functions_part01.R")
source("../003_LibyFunciones/004_functions_part02.R")
source("../003_LibyFunciones/005_functions_part03.R")
source("../003_LibyFunciones/006_functions_part04.R")
# Cargamos textos automatizados
source("../003_LibyFunciones/006_textos_automatizados.R")
# Creamos una funcion que cargue todas las bases de datos medicas originales
# y solo devuelva las bases importadas, y algunos carteles de funcionamiento
# interno.
LoadData_002 <- function(){
# # # Script: 002_LoadData.R
# Lo que hace es cargar 3 bases de datos medicas, que son los pilares
# de todo el trabajo.
# Al final hay algunos retoques que se realizan sobre algunas columnas en
# particular.
# Detalles para la inportacion...
direccion_general_carga <- "../002_BasesOriginales"
archivos_carga <- c("001_Base_Original.xlsx", "002_Base_IPT.xlsx", "003_Base_IC.xlsx")
mensaje_armado <- "Archivo de Script General - 002_LoadData.R"
# Armamos una lista
BASES_ORIGINALES <- list()
# Importamos las bases en el objeto "BASES_ORIGINALES"
for(k in 1:length(archivos_carga)) {
BASES_ORIGINALES[[k]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = k,
input_archivo_esperado = archivos_carga[k],
input_mensaje = mensaje_armado,
input_hoja = 1)
} # Fin for k
# Cada uno recibe el nombre del su archivo
names(BASES_ORIGINALES) <- archivos_carga
#####################################################################
# # # Modificaciones minimas sobre la base de datos original
# 1) Columna G
esta_columna <- let2num("G")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "-") mini[k] <- NA
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
# 2) Columna H
esta_columna <- let2num("H")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "-") mini[k] <- NA
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
# 3) Columna AC
esta_columna <- let2num("AC")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "Forceps") mini[k] <- "Vaginal"
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
###############################################################################################
# 4) Controles de alineado
# Control de alineado entre las bases de datos
# El alineado es para verificar que los archivos poseen:
# la misma cantidad de filas.
# Control de alineado 1 de 2
cat("Control de Alineacion 1 de 2: BASE_ORIGINAL y BASE_IPT\n")
control_alineado(input_b1 = BASES_ORIGINALES[[1]], input_b2 = BASES_ORIGINALES[[2]])
# Control de alineado 2 de 2
cat("Control de Alineacion 2 de 2: BASE_ORIGINAL y BASE_IC\n")
control_alineado(input_b1 = BASES_ORIGINALES[[1]], input_b2 = BASES_ORIGINALES[[3]])
################################################################################################
# 5) Return
return(BASES_ORIGINALES)
}
BASES_ORIGINALES <- LoadData_002()
# Cargamos bases de referencia
# Creamos una funcion que cargue todos los niveles de todas
# las bases de datos medicas originales, y solo devuelve eso y algunos carteles de funcionamiento
# interno.
LoadNiveles_003 <- function(){
# # # Script: 003_LoadNiveles.R
# # # Se importaran las bases en donde se encuentran solo los niveles de
# # # cada una de las variables de cada base de datos medica original.
# Detalles para la inportacion...
direccion_general_carga <- "../003_BasesNiveles"
archivos_carga <- c("001_BE_Niveles Base Original.xlsx", "002_BE_Niveles IPT.xlsx", "003_BE_Niveles IC.xlsx")
mensaje_armado <- "Archivo de Script General - 003_LoadNiveles.R"
# Armamos una lista
BASES_NIVELES_ORIGINALES <- list()
# Importamos las bases en el objeto "BASES_NIVELES_ORIGINALES"
for(k in 1:length(archivos_carga)) {
BASES_NIVELES_ORIGINALES[[k]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = k,
input_archivo_esperado = archivos_carga[k],
input_mensaje = mensaje_armado,
input_hoja = 1)
} # Fin for k
# Cada uno recibe el nombre del su archivo
names(BASES_NIVELES_ORIGINALES) <- archivos_carga
# Damos salida a los archivos importados...
return(BASES_NIVELES_ORIGINALES)
}
BASES_NIVELES_ORIGINALES <- LoadNiveles_003()
# Cargamos bases de referencia
# Creamos las BASES MODIFICADAS...
# Esto quiere decir... Las bases medicas originales se encuentran en el
# objeto "BASES_ORIGINALES".
# Alli las bases presentaran en sus variables categoricas los niveles ordenados
# de manera alfabetica.
# Cambiamos el ordena alfabetico por el orden que nosotros queremos.
# Y hay tambien varios puntos de control, por ejemplo cuando hay en la base
# original una categoria no declarada como un nivel posible en el
# objeto "BASES_NIVELES_ORIGINALES".
BasesModificadas_004 <- function(){
# # # Script: 004_BasesModificadas.R
# # # Se colocan los niveles del factor de todas las variables categoricas
# # # en el orden correcto segun las especificaciones de los archivos
# # # de los niveles.
# Base de datos original con los niveles ordenados
cat("Generacion BASE_MOD_ORIGINAL\n")
BASE_MOD_ORIGINAL <-  control_niveles(input_base = BASES_ORIGINALES[[1]], input_base_niveles = BASES_NIVELES_ORIGINALES[[1]])
# Base de datos IPT con los niveles ordenados
cat("Generacion BASE_MOD_IPT\n")
BASE_MOD_IPT <-  control_niveles(input_base = BASES_ORIGINALES[[2]], input_base_niveles = BASES_NIVELES_ORIGINALES[[2]])
# Base de datos IC con los niveles ordenados
cat("Generacion BASE_MOD_IC\n")
BASE_MOD_IC <-  control_niveles(input_base = BASES_ORIGINALES[[3]], input_base_niveles = BASES_NIVELES_ORIGINALES[[3]])
BASES_MODIFICADAS <- list(BASE_MOD_ORIGINAL, BASE_MOD_IPT, BASE_MOD_IC)
return(BASES_MODIFICADAS)
}
# Capturamos y separamos cada base
BASES_MODIFICADAS <- BasesModificadas_004()
# Separamos cada base
BASE_MOD_ORIGINAL <- BASES_MODIFICADAS[[1]]
BASE_MOD_IPT <- BASES_MODIFICADAS[[2]]
BASE_MOD_IC <- BASES_MODIFICADAS[[3]]
# Borramos lo que ya no hace falta.
remove(BASES_MODIFICADAS)
# Creamos una funcion que cargue todos las bases fijas y haga controles.
# Esto implica:
# - Unidades Hospitalarias
# - Valores Fenton de Peso
# - Valores Fenton de Perimetro Cefalico
LoadArchivosFijos_005 <- function(){
# # # Script: 005_LoadArchivosFijos.R
# Creamos una funcion que cargue todos las bases fijas y haga controles.
# Esto implica:
# - Unidades Hospitalarias
# - Valores Fenton de Peso
# - Valores Fenton de Perimetro Cefalico
# Detalles para la importacion...
direccion_general_carga <- "../004_ArchivosFijos"
archivos_carga <- c("001_Unidades Hospitalarias.xlsx", "002_Fenton General.xlsx")
mensaje_armado <- "Archivo de Script General - 005_LoadArchivosFijos.R"
# Armamos una lista
REJUNTE_BASES_FIJAS <- list()
# 1) Unidades Hospitalarias
REJUNTE_BASES_FIJAS[[1]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 1,
input_archivo_esperado = archivos_carga[1],
input_mensaje = mensaje_armado,
input_hoja = 1)
# 2) Valores Fenton Peso
REJUNTE_BASES_FIJAS[[2]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 2,
input_archivo_esperado = archivos_carga[2],
input_mensaje = mensaje_armado,
input_hoja = 1)
# 3) Valoes Fenton Cefalico
REJUNTE_BASES_FIJAS[[2]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 2,
input_archivo_esperado = archivos_carga[2],
input_mensaje = mensaje_armado,
input_hoja = 2)
}
# Los captamos, y las separamos...
REJUNTE_BASES_FIJAS <- LoadArchivosFijos_005()
BASE_ref_unidades_hospitalarias <- REJUNTE_BASES_FIJAS[[1]]
BASE_ref_Fenton_Peso  <- REJUNTE_BASES_FIJAS[[2]]
BASE_ref_Fenton_PC  <- REJUNTE_BASES_FIJAS[[3]]
remove(REJUNTE_BASES_FIJAS)
#list.files("../003_LibyFunciones")
# Carga de Librerias
source("../003_LibyFunciones/001_libraries.R")
# Carga de la funcion EVA
source("../003_LibyFunciones/002_loadEVA.R")
# Carga de las funciones definidas en la carpeta "functions"
EVA01("../003_LibyFunciones/functions")
# Cargamos funciones escritas en otros formatos
source("../003_LibyFunciones/003_functions_part01.R")
source("../003_LibyFunciones/004_functions_part02.R")
source("../003_LibyFunciones/005_functions_part03.R")
source("../003_LibyFunciones/006_functions_part04.R")
# Cargamos textos automatizados
source("../003_LibyFunciones/006_textos_automatizados.R")
# Creamos una funcion que cargue todas las bases de datos medicas originales
# y solo devuelva las bases importadas, y algunos carteles de funcionamiento
# interno.
LoadData_002 <- function(){
# # # Script: 002_LoadData.R
# Lo que hace es cargar 3 bases de datos medicas, que son los pilares
# de todo el trabajo.
# Al final hay algunos retoques que se realizan sobre algunas columnas en
# particular.
# Detalles para la inportacion...
direccion_general_carga <- "../002_BasesOriginales"
archivos_carga <- c("001_Base_Original.xlsx", "002_Base_IPT.xlsx", "003_Base_IC.xlsx")
mensaje_armado <- "Archivo de Script General - 002_LoadData.R"
# Armamos una lista
BASES_ORIGINALES <- list()
# Importamos las bases en el objeto "BASES_ORIGINALES"
for(k in 1:length(archivos_carga)) {
BASES_ORIGINALES[[k]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = k,
input_archivo_esperado = archivos_carga[k],
input_mensaje = mensaje_armado,
input_hoja = 1)
} # Fin for k
# Cada uno recibe el nombre del su archivo
names(BASES_ORIGINALES) <- archivos_carga
#####################################################################
# # # Modificaciones minimas sobre la base de datos original
# 1) Columna G
esta_columna <- let2num("G")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "-") mini[k] <- NA
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
# 2) Columna H
esta_columna <- let2num("H")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "-") mini[k] <- NA
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
# 3) Columna AC
esta_columna <- let2num("AC")
mini <- BASES_ORIGINALES[[1]][, esta_columna]
for ( k in 1:length(mini)) if (!is.na(mini[k])) if (mini[k] == "Forceps") mini[k] <- "Vaginal"
BASES_ORIGINALES[[1]][, esta_columna] <- mini
remove(mini, esta_columna, k)
##############      ##############      ##############      ##############      ##############
###############################################################################################
# 4) Controles de alineado
# Control de alineado entre las bases de datos
# El alineado es para verificar que los archivos poseen:
# la misma cantidad de filas.
# Control de alineado 1 de 2
cat("Control de Alineacion 1 de 2: BASE_ORIGINAL y BASE_IPT\n")
control_alineado(input_b1 = BASES_ORIGINALES[[1]], input_b2 = BASES_ORIGINALES[[2]])
# Control de alineado 2 de 2
cat("Control de Alineacion 2 de 2: BASE_ORIGINAL y BASE_IC\n")
control_alineado(input_b1 = BASES_ORIGINALES[[1]], input_b2 = BASES_ORIGINALES[[3]])
################################################################################################
# 5) Return
return(BASES_ORIGINALES)
}
BASES_ORIGINALES <- LoadData_002()
# Cargamos bases de referencia
# Creamos una funcion que cargue todos los niveles de todas
# las bases de datos medicas originales, y solo devuelve eso y algunos carteles de funcionamiento
# interno.
LoadNiveles_003 <- function(){
# # # Script: 003_LoadNiveles.R
# # # Se importaran las bases en donde se encuentran solo los niveles de
# # # cada una de las variables de cada base de datos medica original.
# Detalles para la inportacion...
direccion_general_carga <- "../003_BasesNiveles"
archivos_carga <- c("001_BE_Niveles Base Original.xlsx", "002_BE_Niveles IPT.xlsx", "003_BE_Niveles IC.xlsx")
mensaje_armado <- "Archivo de Script General - 003_LoadNiveles.R"
# Armamos una lista
BASES_NIVELES_ORIGINALES <- list()
# Importamos las bases en el objeto "BASES_NIVELES_ORIGINALES"
for(k in 1:length(archivos_carga)) {
BASES_NIVELES_ORIGINALES[[k]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = k,
input_archivo_esperado = archivos_carga[k],
input_mensaje = mensaje_armado,
input_hoja = 1)
} # Fin for k
# Cada uno recibe el nombre del su archivo
names(BASES_NIVELES_ORIGINALES) <- archivos_carga
# Damos salida a los archivos importados...
return(BASES_NIVELES_ORIGINALES)
}
BASES_NIVELES_ORIGINALES <- LoadNiveles_003()
# Cargamos bases de referencia
# Creamos las BASES MODIFICADAS...
# Esto quiere decir... Las bases medicas originales se encuentran en el
# objeto "BASES_ORIGINALES".
# Alli las bases presentaran en sus variables categoricas los niveles ordenados
# de manera alfabetica.
# Cambiamos el ordena alfabetico por el orden que nosotros queremos.
# Y hay tambien varios puntos de control, por ejemplo cuando hay en la base
# original una categoria no declarada como un nivel posible en el
# objeto "BASES_NIVELES_ORIGINALES".
BasesModificadas_004 <- function(){
# # # Script: 004_BasesModificadas.R
# # # Se colocan los niveles del factor de todas las variables categoricas
# # # en el orden correcto segun las especificaciones de los archivos
# # # de los niveles.
# Base de datos original con los niveles ordenados
cat("Generacion BASE_MOD_ORIGINAL\n")
BASE_MOD_ORIGINAL <-  control_niveles(input_base = BASES_ORIGINALES[[1]], input_base_niveles = BASES_NIVELES_ORIGINALES[[1]])
# Base de datos IPT con los niveles ordenados
cat("Generacion BASE_MOD_IPT\n")
BASE_MOD_IPT <-  control_niveles(input_base = BASES_ORIGINALES[[2]], input_base_niveles = BASES_NIVELES_ORIGINALES[[2]])
# Base de datos IC con los niveles ordenados
cat("Generacion BASE_MOD_IC\n")
BASE_MOD_IC <-  control_niveles(input_base = BASES_ORIGINALES[[3]], input_base_niveles = BASES_NIVELES_ORIGINALES[[3]])
BASES_MODIFICADAS <- list(BASE_MOD_ORIGINAL, BASE_MOD_IPT, BASE_MOD_IC)
return(BASES_MODIFICADAS)
}
# Capturamos y separamos cada base
BASES_MODIFICADAS <- BasesModificadas_004()
# Separamos cada base
BASE_MOD_ORIGINAL <- BASES_MODIFICADAS[[1]]
BASE_MOD_IPT <- BASES_MODIFICADAS[[2]]
BASE_MOD_IC <- BASES_MODIFICADAS[[3]]
# Borramos lo que ya no hace falta.
remove(BASES_MODIFICADAS)
# Creamos una funcion que cargue todos las bases fijas y haga controles.
# Esto implica:
# - Unidades Hospitalarias
# - Valores Fenton de Peso
# - Valores Fenton de Perimetro Cefalico
LoadArchivosFijos_005 <- function(){
# # # Script: 005_LoadArchivosFijos.R
# Creamos una funcion que cargue todos las bases fijas y haga controles.
# Esto implica:
# - Unidades Hospitalarias
# - Valores Fenton de Peso
# - Valores Fenton de Perimetro Cefalico
# Detalles para la importacion...
direccion_general_carga <- "../004_ArchivosFijos"
archivos_carga <- c("001_Unidades Hospitalarias.xlsx", "002_Fenton General.xlsx")
mensaje_armado <- "Archivo de Script General - 005_LoadArchivosFijos.R"
# Armamos una lista
REJUNTE_BASES_FIJAS <- list()
# 1) Unidades Hospitalarias
REJUNTE_BASES_FIJAS[[1]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 1,
input_archivo_esperado = archivos_carga[1],
input_mensaje = mensaje_armado,
input_hoja = 1)
# 2) Valores Fenton Peso
REJUNTE_BASES_FIJAS[[2]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 2,
input_archivo_esperado = archivos_carga[2],
input_mensaje = mensaje_armado,
input_hoja = 1)
# 3) Valoes Fenton Cefalico
REJUNTE_BASES_FIJAS[[2]] <- cargar_archivoUV(input_direccion = direccion_general_carga,
input_pos_archivo = 2,
input_archivo_esperado = archivos_carga[2],
input_mensaje = mensaje_armado,
input_hoja = 2)
}
# Los captamos, y las separamos...
REJUNTE_BASES_FIJAS <- LoadArchivosFijos_005()
BASE_ref_unidades_hospitalarias <- REJUNTE_BASES_FIJAS[[1]]
BASE_ref_Fenton_Peso  <- REJUNTE_BASES_FIJAS[[2]]
BASE_ref_Fenton_PC  <- REJUNTE_BASES_FIJAS[[3]]
remove(REJUNTE_BASES_FIJAS)
# Creamos una funcion que cargue todos las bases de referencia
# que tenemos para la resolucion de tablas y graficos
LoadArchivosRef_006 <- function(){
mensaje_armado <- "Carga de Referencia para Tablas - 006_LoadArchivosRef"
ref_Tablas <- cargar_archivoUV(input_direccion = "../011_ScriptTablas/001_ModelosTablas",
input_pos_archivo = NULL,
input_archivo_esperado = "000_Tablas y Minibases.xlsx",
input_mensaje = mensaje_armado,
input_hoja = 1)
return(ref_Tablas)
}
# Los captamos, y las separamos...
ref_Tablas <- LoadArchivosRef_006()
# Creamos una funcion que cargue todos las bases de referencia
# que tenemos para la resolucion de tablas y graficos
LoadArchivosRef_006 <- function(){
# Tenemos un mensaje de referencia...
mensaje_armado <- "Carga de Referencia para Tablas - 006_LoadArchivosRef"
# Cargamos tablas...
ref_Tablas <- cargar_archivoUV(input_direccion = "../011_ScriptTablas/001_ModelosTablas",
input_pos_archivo = NULL,
input_archivo_esperado = "000_Tablas y Minibases.xlsx",
input_mensaje = mensaje_armado,
input_hoja = 1)
# Cargamos graficos...
ref_Graficos <- cargar_archivoUV(input_direccion = "../012_ScriptGraficos/001_ModelosGraficos",
input_pos_archivo = NULL,
input_archivo_esperado = "000_Graficos y Minibases.xlsx",
input_mensaje = mensaje_armado,
input_hoja = 1)
# Juntamos todos en un combinadito...
combinadito <- list(ref_Tablas, ref_Graficos)
# Sale el combinadito...
return(combinadito)
}
# Los captamos, y las separamos...
combinadito <- LoadArchivosRef_006()
ref_Tablas <- combinadito[[1]]
ref_Graficos <- combinadito[[2]]
remove(combinadito)
